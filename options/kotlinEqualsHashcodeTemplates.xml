<application>
  <component name="KotlinEqualsHashcodeTemplates" defaultTemplateName="Pluu equals">
    <option name="templates">
      <list>
        <TemplateResource>
          <option name="fileName" value="Pluu equals" />
          <option name="template" value="#set($paramName = $helper.getUniqueLocalVarName($baseParamName, $fields, $settings))&#10;override fun equals(${paramName}: Any?): Boolean{&#10;#addEqualsPrologue()&#10;#if ($fields.size() &gt; 0)&#10;&#10;    #if (!$checkParameterWithInstanceof)&#10;    #addClassInstance()&#10;&#10;    #end&#10;    #foreach($field in $fields)&#10;        #addFieldComparison($field)&#10;    #end&#10;&#10;#end&#10;return true&#10;}&#10;##&#10;#macro(addFieldComparison $field)&#10;    if (##&#10;    #if ($field.nestedArray)&#10;    !$field.name##&#10;    .##&#10;    contentDeepEquals(##&#10;    ${paramName}.$field.name))##&#10;    #elseif ($field.array)&#10;    !$field.name##&#10;    .##&#10;    contentEquals(##&#10;    ${paramName}.$field.name))##&#10;    #else&#10;    $field.name != ${paramName}.$field.name)##&#10;    #end&#10;    return false&#10;#end&#10;##&#10;#macro(addClassInstance)&#10;    #set($wildcards = &quot;#generateWildcards()&quot;)&#10;$paramName as $classname$wildcards&#10;#end&#10;##&#10;#macro(generateWildcards)&#10;    #if ($class.typeParams &gt; 0)&#10;    &lt;##&#10;        #set( $arr = [1..$class.typeParams] )&#10;        #foreach( $i in $arr )&#10;            #if ($i &gt; 1)&#10;            , ##&#10;            #end&#10;        *##&#10;        #end&#10;    &gt;##&#10;    #end&#10;#end&#10;##&#10;#macro(addEqualsPrologue)&#10;if(this === ${paramName}) return true&#10;    #addInstanceOfToText()&#10;    #if ($superHasEquals)&#10;    if(!super.equals(${paramName})) return false&#10;    #end&#10;#end&#10;##&#10;#macro(addInstanceOfToText)&#10;#if ($checkParameterWithInstanceof)&#10;if ($paramName !is $classname##&#10;#generateWildcards()) return false&#10;#elseif ($isCommon || $isNative || $isWasm)&#10;if ($paramName == null || this::class != $paramName::class) return false&#10;#elseif ($isJs)&#10;if ($paramName == null || this::class.js != $paramName::class.js) return false&#10;#else&#10;if(javaClass != ${paramName}?.javaClass) return false&#10;#end&#10;#end&#10;" />
        </TemplateResource>
        <TemplateResource>
          <option name="fileName" value="Pluu hashCode" />
          <option name="template" value="override fun hashCode(): kotlin.Int {&#10;#if (!$superHasHashCode &amp;&amp; $fields.size() == 1)&#10;    #set($field = $fields.get(0))&#10;    return #addFieldHashCode($field)##&#10;    #if (!$field.notNull) ?:0##&#10;    #end&#10;#elseif ($fields.size() &gt; 0)&#10;    #set($resultName = $helper.getUniqueLocalVarName(&quot;result&quot;, $fields, $settings))&#10;var $resultName ##&#10;    #set($resultAssigned = false)&#10;    #set($resultDeclarationCompleted = false)&#10;    #if ($superHasHashCode)&#10;    = #addSuperHashCode()&#10;        #set($resultAssigned = true)&#10;        #set($resultDeclarationCompleted = true)&#10;    #end&#10;    #foreach($field in $fields)&#10;        #if ($resultDeclarationCompleted)&#10;            $resultName ##&#10;        #end&#10;    = ##&#10;        #if ($resultAssigned)&#10;        31 * $resultName + ##&#10;            #if(!$field.notNull)(##&#10;            #end&#10;        #end&#10;        #addFieldHashCode($field)##&#10;        #if (!$field.notNull) ?: 0##&#10;            #if ($resultAssigned))##&#10;            #end&#10;        #end&#10;&#10;        #set($resultAssigned = true)&#10;        #set($resultDeclarationCompleted = true)&#10;    #end&#10;return $resultName&#10;#elseif($superHasHashCode)&#10;return super.hashCode()&#10;#else&#10;return #addClassLiteral()##&#10;.hashCode()&#10;#end&#10;}&#10;##&#10;#macro (addClassLiteral)&#10;    #if ($isCommon || $isNative || $isWasm)&#10;    this::class##&#10;    #elseif ($isJs)&#10;    this::class.js##&#10;    #else&#10;    javaClass##&#10;    #end&#10;#end&#10;##&#10;#macro(adjustHashCodeToArrays $field $dot)&#10;    #if ($field.array)&#10;        #if ($field.nestedArray)&#10;        $field.name##&#10;        $dot##&#10;        contentDeepHashCode()##&#10;        #else&#10;        $field.name##&#10;        $dot##&#10;        contentHashCode()##&#10;        #end&#10;    #elseif ($field.byte || $field.short || $field.int)&#10;        $field.name##&#10;    #else $field.name##&#10;    $dot##&#10;    hashCode()##&#10;    #end&#10;#end&#10;##&#10;#macro(addSuperHashCode)&#10;    #if ($superHasHashCode)&#10;    super.hashCode()##&#10;    #else&#10;    0##&#10;    #end&#10;#end&#10;##&#10;#macro(addFieldHashCode $field)&#10;    #if ($field.notNull)#adjustHashCodeToArrays($field, &quot;.&quot;)&#10;    #else #adjustHashCodeToArrays($field, &quot;?.&quot;)&#10;    #end&#10;#end" />
        </TemplateResource>
      </list>
    </option>
  </component>
</application>